//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/script/playeractionkey.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Playeractionkey : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Playeractionkey()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""playeractionkey"",
    ""maps"": [
        {
            ""name"": ""player"",
            ""id"": ""d5ae0488-b839-4d8e-b9ca-13588659f01b"",
            ""actions"": [
                {
                    ""name"": ""movement"",
                    ""type"": ""Value"",
                    ""id"": ""6a585b50-1356-45c7-95bc-049836436680"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""shoot"",
                    ""type"": ""Button"",
                    ""id"": ""8721490d-2a13-4592-ae61-2096e56dcaa8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""514e8de1-9145-4048-bf0f-6df04f8e180c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""look"",
                    ""type"": ""Value"",
                    ""id"": ""e6ba9c25-55af-45bc-b84c-d84e4e914192"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""afdb092a-9517-4fc1-b185-67343b16b175"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f51d9dbe-0a65-47f8-94c5-2066fb0bc05d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""94ccbd91-53c3-4669-a4ab-52070cf3e835"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ae6bf7be-17a3-4ce4-b979-b402163b0cc5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""90e86626-f1b1-42b4-8ccf-1257529d5054"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f2529919-0bcb-47d4-876e-2c751b037242"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d4790da-331f-438b-b010-830c1205a357"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bae8aac5-416f-4692-84e1-140352d92559"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e907a2e-8a62-41ec-ae1b-ed18af696e53"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de2a934a-9120-413b-9200-b9a9abf463b4"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false)"",
                    ""groups"": """",
                    ""action"": ""look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""editer"",
            ""id"": ""f3c47a73-873a-4dd2-bff1-800f11e87cc0"",
            ""actions"": [
                {
                    ""name"": ""enableEditer"",
                    ""type"": ""Button"",
                    ""id"": ""9bbf45a1-3c8e-4380-bc6c-3ad154458c61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""addItem"",
                    ""type"": ""Button"",
                    ""id"": ""ae293745-0a59-46e4-aeac-26cfc66fa03b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""dropItem"",
                    ""type"": ""Button"",
                    ""id"": ""f47f4b9f-25e0-4c2c-8168-7e302cd7b5bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""efb0dfaf-8d95-4606-bfe7-303237798066"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""enableEditer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec333d35-add3-4549-93ff-2cb2b55b484c"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""addItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6407e025-bf50-408f-a541-b13da51aca43"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dropItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // player
        m_player = asset.FindActionMap("player", throwIfNotFound: true);
        m_player_movement = m_player.FindAction("movement", throwIfNotFound: true);
        m_player_shoot = m_player.FindAction("shoot", throwIfNotFound: true);
        m_player_jump = m_player.FindAction("jump", throwIfNotFound: true);
        m_player_look = m_player.FindAction("look", throwIfNotFound: true);
        // editer
        m_editer = asset.FindActionMap("editer", throwIfNotFound: true);
        m_editer_enableEditer = m_editer.FindAction("enableEditer", throwIfNotFound: true);
        m_editer_addItem = m_editer.FindAction("addItem", throwIfNotFound: true);
        m_editer_dropItem = m_editer.FindAction("dropItem", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // player
    private readonly InputActionMap m_player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_player_movement;
    private readonly InputAction m_player_shoot;
    private readonly InputAction m_player_jump;
    private readonly InputAction m_player_look;
    public struct PlayerActions
    {
        private @Playeractionkey m_Wrapper;
        public PlayerActions(@Playeractionkey wrapper) { m_Wrapper = wrapper; }
        public InputAction @movement => m_Wrapper.m_player_movement;
        public InputAction @shoot => m_Wrapper.m_player_shoot;
        public InputAction @jump => m_Wrapper.m_player_jump;
        public InputAction @look => m_Wrapper.m_player_look;
        public InputActionMap Get() { return m_Wrapper.m_player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @shoot.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @shoot.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @shoot.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @look.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @look.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @look.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @movement.started += instance.OnMovement;
                @movement.performed += instance.OnMovement;
                @movement.canceled += instance.OnMovement;
                @shoot.started += instance.OnShoot;
                @shoot.performed += instance.OnShoot;
                @shoot.canceled += instance.OnShoot;
                @jump.started += instance.OnJump;
                @jump.performed += instance.OnJump;
                @jump.canceled += instance.OnJump;
                @look.started += instance.OnLook;
                @look.performed += instance.OnLook;
                @look.canceled += instance.OnLook;
            }
        }
    }
    public PlayerActions @player => new PlayerActions(this);

    // editer
    private readonly InputActionMap m_editer;
    private IEditerActions m_EditerActionsCallbackInterface;
    private readonly InputAction m_editer_enableEditer;
    private readonly InputAction m_editer_addItem;
    private readonly InputAction m_editer_dropItem;
    public struct EditerActions
    {
        private @Playeractionkey m_Wrapper;
        public EditerActions(@Playeractionkey wrapper) { m_Wrapper = wrapper; }
        public InputAction @enableEditer => m_Wrapper.m_editer_enableEditer;
        public InputAction @addItem => m_Wrapper.m_editer_addItem;
        public InputAction @dropItem => m_Wrapper.m_editer_dropItem;
        public InputActionMap Get() { return m_Wrapper.m_editer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EditerActions set) { return set.Get(); }
        public void SetCallbacks(IEditerActions instance)
        {
            if (m_Wrapper.m_EditerActionsCallbackInterface != null)
            {
                @enableEditer.started -= m_Wrapper.m_EditerActionsCallbackInterface.OnEnableEditer;
                @enableEditer.performed -= m_Wrapper.m_EditerActionsCallbackInterface.OnEnableEditer;
                @enableEditer.canceled -= m_Wrapper.m_EditerActionsCallbackInterface.OnEnableEditer;
                @addItem.started -= m_Wrapper.m_EditerActionsCallbackInterface.OnAddItem;
                @addItem.performed -= m_Wrapper.m_EditerActionsCallbackInterface.OnAddItem;
                @addItem.canceled -= m_Wrapper.m_EditerActionsCallbackInterface.OnAddItem;
                @dropItem.started -= m_Wrapper.m_EditerActionsCallbackInterface.OnDropItem;
                @dropItem.performed -= m_Wrapper.m_EditerActionsCallbackInterface.OnDropItem;
                @dropItem.canceled -= m_Wrapper.m_EditerActionsCallbackInterface.OnDropItem;
            }
            m_Wrapper.m_EditerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @enableEditer.started += instance.OnEnableEditer;
                @enableEditer.performed += instance.OnEnableEditer;
                @enableEditer.canceled += instance.OnEnableEditer;
                @addItem.started += instance.OnAddItem;
                @addItem.performed += instance.OnAddItem;
                @addItem.canceled += instance.OnAddItem;
                @dropItem.started += instance.OnDropItem;
                @dropItem.performed += instance.OnDropItem;
                @dropItem.canceled += instance.OnDropItem;
            }
        }
    }
    public EditerActions @editer => new EditerActions(this);
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IEditerActions
    {
        void OnEnableEditer(InputAction.CallbackContext context);
        void OnAddItem(InputAction.CallbackContext context);
        void OnDropItem(InputAction.CallbackContext context);
    }
}
